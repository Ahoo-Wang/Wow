import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.CXozoTLq.js";const l="/wow/assets/send-command.DSZqkk9k.svg",y=JSON.parse('{"title":"命令网关","description":"","frontmatter":{},"headers":[],"relativePath":"guide/command-gateway.md","filePath":"guide/command-gateway.md","lastUpdated":1721086461000}'),t={name:"guide/command-gateway.md"},h=n('<h1 id="命令网关" tabindex="-1">命令网关 <a class="header-anchor" href="#命令网关" aria-label="Permalink to &quot;命令网关&quot;">​</a></h1><p>命令网关是系统中接收和发送命令的核心组件，作为命令的入口点发挥关键作用。 它是命令总线的扩展，不仅负责命令的传递，还增加了一系列重要的职责，包括命令的幂等性、等待策略以及命令验证。</p><h2 id="发送命令" tabindex="-1">发送命令 <a class="header-anchor" href="#发送命令" aria-label="Permalink to &quot;发送命令&quot;">​</a></h2><p><img src="'+l+`" alt="发送命令 - 命令网关"></p><h2 id="幂等性" tabindex="-1">幂等性 <a class="header-anchor" href="#幂等性" aria-label="Permalink to &quot;幂等性&quot;">​</a></h2><p>命令幂等性是确保相同命令在系统中最多执行一次的原则。</p><p>命令网关通过使用 <code>IdempotencyChecker</code> 对命令的 <code>RequestId</code> 进行幂等性检查。 如果命令已经执行过，则会抛出 <code>DuplicateRequestIdException</code> 异常，防止对同一命令的重复执行。</p><p>以下是一个示例的 HTTP 请求，展示了如何在请求中使用 <code>Command-Request-Id</code> 来确保命令的幂等性：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>开发者也可以通过<code>CommandMessage</code>的<code>requestId</code>属性自定义<code>RequestId</code>。</p></div><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://localhost:8080/account/create_account</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Wait-Stage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROCESSED</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Wait-Timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 30000</span></span>
<span class="line has-focus"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Request-Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {{$uuid}}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Aggregate-Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sourceId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;balance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">wow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kafka</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    idempotency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      bloom-filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        expected-insertions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        ttl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PT60S</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        fpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00001</span></span></code></pre></div><h2 id="等待策略" tabindex="-1">等待策略 <a class="header-anchor" href="#等待策略" aria-label="Permalink to &quot;等待策略&quot;">​</a></h2><p><em>命令等待策略</em>指的是命令网关在发送命令后，等待命令执行结果的一种策略。</p><p><em>命令等待策略</em>是 <em>Wow</em> 框架中的重要特性，其目标是解决 <em>CQRS</em> 、读写分离模式下数据同步延迟的问题。</p><p>命令等待策略（<code>WaitStrategy</code>）支持的等待信号如下：</p><ul><li><code>SENT</code> : 当命令发布到命令总线/队列后，生成完成信号</li><li><code>PROCESSED</code> : 当命令被聚合根处理完成后，生成完成信号</li><li><code>SNAPSHOT</code> : 当快照被生成后，生成完成信号</li><li><code>PROJECTED</code> : 当命令产生的事件<em>投影</em>完成后，生成完成信号</li><li><code>EVENT_HANDLED</code> : 当命令产生的事件被<em>事件处理器</em>处理完成后，生成完成信号</li><li><code>SAGA_HANDLED</code> : 当命令产生的事件被<em>Saga</em>处理完成后，生成完成信号</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-B4mQ_" id="tab-r-MynRA" checked><label for="tab-r-MynRA">http</label><input type="radio" name="group-B4mQ_" id="tab-qZPD-Ry"><label for="tab-qZPD-Ry">kotlin</label></div><div class="blocks"><div class="language-http vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://localhost:8080/account/create_account</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line has-focus"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Wait-Stage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROCESSED</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Wait-Timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 30000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Request-Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {{$uuid}}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Command-Aggregate-Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sourceId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;balance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commamdGateway.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendAndWaitForProcessed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span></code></pre></div></div></div><h2 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">​</a></h2><p>命令网关在发送命令之前会使用 <code>jakarta.validation.Validator</code> 对命令进行验证，如果验证失败，将会抛出 CommandValidationException 异常。</p><p>通过利用 <code>jakarta.validation.Validator</code>，开发者可以使用 <code>jakarta.validation</code> 提供的各种验证注解，确保命令符合指定的规范和条件。</p><h2 id="localfirst-模式-减少网络io的影响" tabindex="-1">LocalFirst 模式：减少网络IO的影响 <a class="header-anchor" href="#localfirst-模式-减少网络io的影响" aria-label="Permalink to &quot;LocalFirst 模式：减少网络IO的影响&quot;">​</a></h2><p>通常情况下，从发送命令到聚合根完成命令处理的流程如下：</p><ol><li>聚合根处理器订阅分布式命令总线消息。</li><li>客户端通过命令网关将命令发送至分布式命令总线。</li><li>聚合根处理器接收并处理命令。</li><li>聚合根处理器发送处理完成信号给客户端。</li></ol><p>在上述流程中，步骤 2 和 3 中涉及网络IO。而 LocalFirst 模式的目标是尽量消除这些网络IO的影响。具体流程如下：</p><ol><li>聚合根处理器订阅本地命令总线以及分布式命令总线消息。</li><li>客户端通过命令网关发送命令。 <ol><li>如果命令网关判断该命令不能在本地服务实例处理，则将命令发送至分布式命令总线。</li><li>如果可以在本地处理，则将命令同时发送至本地命令总线和分布式命令总线。</li></ol></li><li>聚合根处理器接收到命令并处理命令.</li><li>聚合根处理器发送处理完成信号给客户端.</li></ol><p>通过 <em>LocalFirst 模式</em>，命令发送至本地总线以及完成信号通知均不需要网络IO。</p><h3 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-label="Permalink to &quot;配置&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">wow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kafka</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      local-first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 默认已开启</span></span></code></pre></div><h2 id="命令选项提取器-改写" tabindex="-1">命令选项提取器（改写） <a class="header-anchor" href="#命令选项提取器-改写" aria-label="Permalink to &quot;命令选项提取器（改写）&quot;">​</a></h2><p>命令选项抽取器(<code>CommandOptionsExtractor</code>)是一个用于从命令体(<code>Body</code>)中的抽取的命令选项(<code>CommandOptions</code>)的组件，以便与改写命令的消息元数据(<code>aggregateId</code>/<code>tenantId</code> 等)。</p><p>以下是一个重置密码命令选项抽取器的示例：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>用户重置密码（找回密码）前是无法获得聚合根ID的，所以需要通过该提取器获得 <code>User</code> 聚合根的ID</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 重置密码(\`ResetPwd\`)命令聚合根ID提取器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 该命令需要根据命令体中的手机号码查询用户聚合根ID，以便满足命令消息聚合根ID必填的要求。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@see</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ResetPwd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetPwdCommandOptionsExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queryService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SnapshotQueryService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CommandOptionsExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResetPwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> supportedCommandType: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResetPwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResetPwd::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResetPwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> singleQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         projection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Documents.ID_FIELD) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            nestedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            PHONE_VERIFIED eq </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            PHONE eq command.phone</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamicQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(queryService)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">switchIfEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;手机号码尚未绑定。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregateId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MessageRecords.AGGREGATE_ID))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>开发者通过 <em>Spring</em> 的 <code>@Service</code> 注解，将该提取器注册到 <em>Spring</em> 容器中即可完成提取器的注册。</p>`,35),e=[h];function p(k,d,E,r,o,c){return a(),i("div",null,e)}const F=s(t,[["render",p]]);export{y as __pageData,F as default};
