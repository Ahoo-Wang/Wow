@import java.time.LocalDateTime
@import java.time.Instant
@import java.time.ZoneId
@import java.time.format.DateTimeFormatter

@import me.ahoo.wow.api.event.DomainEvent
@import me.ahoo.wow.modeling.state.ReadOnlyStateAggregate
@import me.ahoo.wow.compensation.api.IExecutionFailedState
@import me.ahoo.wow.compensation.api.ExecutionSuccessApplied

@param host: String
@param event: DomainEvent<ExecutionSuccessApplied>
@param state: ReadOnlyStateAggregate<IExecutionFailedState>

!{val root = state.state}
!{val processor = root.processor}
!{val eventId = root.eventId}
!{val retryState = root.retryState}

# Execution Success - ${retryState.retries}
@if(host.isNotBlank())
- Id：[${root.id}](${host}/succeeded?id=${root.id})
@else
- Id：${"`"}${root.id}${"`"}
@endif
- Processor：${processor.processorName}@${processor.contextName}
- ExecuteAt：${LocalDateTime.ofInstant(Instant.ofEpochMilli(root.executeAt), ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
## Event Id
- Aggregate: ${eventId.aggregateId.aggregateName}@${eventId.aggregateId.contextName}
- AggregateId: ${"`"}${eventId.aggregateId.id}${"`"}
- Id: ${"`"}${eventId.id}${"`"}
- Version: ${"`"}${eventId.version}${"`"}
## Retry State
- Retries: ${retryState.retries}(${root.retrySpec.maxRetries})
- RetryAt: ${LocalDateTime.ofInstant(Instant.ofEpochMilli(retryState.retryAt), ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
- Status: <font color="info">${root.status.toString()}</font>

