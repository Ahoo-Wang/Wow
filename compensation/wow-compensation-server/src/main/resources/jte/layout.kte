@import java.time.LocalDateTime
@import java.time.Instant
@import java.time.ZoneId
@import java.time.format.DateTimeFormatter
@import gg.jte.Content
@import me.ahoo.wow.api.exception.RecoverableType
@import me.ahoo.wow.modeling.state.ReadOnlyStateAggregate
@import me.ahoo.wow.compensation.api.ExecutionFailedStatus
@import me.ahoo.wow.compensation.api.IExecutionFailedState
@import me.ahoo.wow.compensation.server.webhook.QuickNavigation.toNavAsMarkdown

@param title: String
@param host: String
@param state: ReadOnlyStateAggregate<IExecutionFailedState>

!{val root = state.state}
!{val function = root.function}
!{val eventId = root.eventId}
!{val retryState = root.retryState}
!{val statusStyle = when(root.status) {
    ExecutionFailedStatus.FAILED -> "warning"
    ExecutionFailedStatus.PREPARED -> "comment"
    ExecutionFailedStatus.SUCCEEDED -> "info"
}
}
!{val recoverableStyle = when(root.recoverable) {
    RecoverableType.UNRECOVERABLE -> "warning"
    RecoverableType.UNKNOWN -> "comment"
    RecoverableType.RECOVERABLE -> "info"
}
}


# ${title} - ${retryState.retries}
- Idï¼š${root.toNavAsMarkdown(host)}
- Processor: ${function.processorName}@${function.contextName}
- Function: ${function.name}
- ExecuteAt: ${LocalDateTime.ofInstant(Instant.ofEpochMilli(root.executeAt), ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
- Recoverable: <font color="${recoverableStyle}">${root.recoverable}</font>
## Event Id
- Aggregate: ${eventId.aggregateId.aggregateName}@${eventId.aggregateId.contextName}
- AggregateId: ${"`"}${eventId.aggregateId.id}${"`"}
- Id: ${"`"}${eventId.id}${"`"}
- Version: ${"`"}${eventId.version}${"`"}
## Retry State
- Retries: ${retryState.retries}(${root.retrySpec.maxRetries})
- RetryAt: ${LocalDateTime.ofInstant(Instant.ofEpochMilli(retryState.retryAt), ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
- NextRetryAt: ${LocalDateTime.ofInstant(Instant.ofEpochMilli(retryState.nextRetryAt), ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
- Status: <font color="${statusStyle}">${root.status.toString()}</font>