import { ContentTypeValues } from "@ahoo-wang/fetcher";
import { type ApiMetadata, type ApiMetadataCapable, api, attribute, autoGeneratedError, del, path, post, put, request } from "@ahoo-wang/fetcher-decorator";
import { JsonEventStreamResultExtractor } from "@ahoo-wang/fetcher-eventstream";
import type { CommandRequest, CommandResult, CommandResultEventStream, DeleteAggregate, RecoverAggregate } from "@ahoo-wang/fetcher-wow";
import { ApplyExecutionFailed, ApplyExecutionSuccess, ApplyRetrySpec, ChangeFunction, CreateExecutionFailed, ForcePrepareCompensation, MarkRecoverable, PrepareCompensation } from "./types";

enum COMMAND_ENDPOINT_PATHS {
    APPLY_EXECUTION_FAILED = '/execution_failed/{id}/apply_execution_failed',
    APPLY_EXECUTION_SUCCESS = '/execution_failed/{id}/apply_execution_success',
    APPLY_RETRY_SPEC = '/execution_failed/{id}/apply_retry_spec',
    CHANGE_FUNCTION = '/execution_failed/{id}/change_function',
    CREATE_EXECUTION_FAILED = '/execution_failed/create_execution_failed',
    DEFAULT_DELETE_AGGREGATE = '/execution_failed/{id}',
    DEFAULT_RECOVER_AGGREGATE = '/execution_failed/{id}/recover',
    FORCE_PREPARE_COMPENSATION = '/execution_failed/{id}/force_prepare_compensation',
    MARK_RECOVERABLE = '/execution_failed/{id}/mark_recoverable',
    PREPARE_COMPENSATION = '/execution_failed/{id}/prepare_compensation'
}

const DEFAULT_COMMAND_CLIENT_OPTIONS: ApiMetadata = {
    basePath: 'compensation'
};

@api()
export class ExecutionFailedCommandClient<R = CommandResult> implements ApiMetadataCapable {
    constructor(public readonly apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
    }

    /**
     * apply_execution_failed
     * - operationId: `compensation.execution_failed.apply_execution_failed`
     * - path: `/execution_failed/{id}/apply_execution_failed`
     */
    @put(COMMAND_ENDPOINT_PATHS.APPLY_EXECUTION_FAILED)
    applyExecutionFailed(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionFailed>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * apply_execution_success
     * - operationId: `compensation.execution_failed.apply_execution_success`
     * - path: `/execution_failed/{id}/apply_execution_success`
     */
    @put(COMMAND_ENDPOINT_PATHS.APPLY_EXECUTION_SUCCESS)
    applyExecutionSuccess(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyExecutionSuccess>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * apply_retry_spec
     * - operationId: `compensation.execution_failed.apply_retry_spec`
     * - path: `/execution_failed/{id}/apply_retry_spec`
     */
    @put(COMMAND_ENDPOINT_PATHS.APPLY_RETRY_SPEC)
    applyRetrySpec(@path('id') id: string, @request() commandRequest: CommandRequest<ApplyRetrySpec>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * change_function
     * - operationId: `compensation.execution_failed.change_function`
     * - path: `/execution_failed/{id}/change_function`
     */
    @put(COMMAND_ENDPOINT_PATHS.CHANGE_FUNCTION)
    changeFunction(@path('id') id: string, @request() commandRequest: CommandRequest<ChangeFunction>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * create_execution_failed
     * - operationId: `compensation.execution_failed.create_execution_failed`
     * - path: `/execution_failed/create_execution_failed`
     */
    @post(COMMAND_ENDPOINT_PATHS.CREATE_EXECUTION_FAILED)
    createExecutionFailed(@request() commandRequest: CommandRequest<CreateExecutionFailed>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(commandRequest, attributes);
    }

    /**
     * Delete aggregate
     * - operationId: `compensation.execution_failed.default_delete_aggregate`
     * - path: `/execution_failed/{id}`
     */
    @del(COMMAND_ENDPOINT_PATHS.DEFAULT_DELETE_AGGREGATE)
    defaultDeleteAggregate(@path('id') id: string, @request() commandRequest?: CommandRequest<DeleteAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * Recover deleted aggregate
     * - operationId: `compensation.execution_failed.default_recover_aggregate`
     * - path: `/execution_failed/{id}/recover`
     */
    @put(COMMAND_ENDPOINT_PATHS.DEFAULT_RECOVER_AGGREGATE)
    defaultRecoverAggregate(@path('id') id: string, @request() commandRequest?: CommandRequest<RecoverAggregate>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * force_prepare_compensation
     * - operationId: `compensation.execution_failed.force_prepare_compensation`
     * - path: `/execution_failed/{id}/force_prepare_compensation`
     */
    @put(COMMAND_ENDPOINT_PATHS.FORCE_PREPARE_COMPENSATION)
    forcePrepareCompensation(@path('id') id: string, @request() commandRequest?: CommandRequest<ForcePrepareCompensation>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * mark_recoverable
     * - operationId: `compensation.execution_failed.mark_recoverable`
     * - path: `/execution_failed/{id}/mark_recoverable`
     */
    @put(COMMAND_ENDPOINT_PATHS.MARK_RECOVERABLE)
    markRecoverable(@path('id') id: string, @request() commandRequest: CommandRequest<MarkRecoverable>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }

    /**
     * prepare_compensation
     * - operationId: `compensation.execution_failed.prepare_compensation`
     * - path: `/execution_failed/{id}/prepare_compensation`
     */
    @put(COMMAND_ENDPOINT_PATHS.PREPARE_COMPENSATION)
    prepareCompensation(@path('id') id: string, @request() commandRequest?: CommandRequest<PrepareCompensation>, @attribute() attributes?: Record<string, any>): Promise<R> {
        throw autoGeneratedError(id, commandRequest, attributes);
    }
}

@api('', {
    headers: { Accept: ContentTypeValues.TEXT_EVENT_STREAM },
    resultExtractor: JsonEventStreamResultExtractor,
})
export class ExecutionFailedStreamCommandClient extends ExecutionFailedCommandClient<CommandResultEventStream> {
    constructor(apiMetadata: ApiMetadata = DEFAULT_COMMAND_CLIENT_OPTIONS) {
        super(apiMetadata);
    }
}
