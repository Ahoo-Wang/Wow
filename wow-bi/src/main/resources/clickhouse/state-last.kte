@import me.ahoo.wow.api.modeling.NamedAggregate
@import me.ahoo.wow.bi.expansion.TableNaming.toDistributedTableName

@param namedAggregate: NamedAggregate

!{val stateDistributedTableName = namedAggregate.toDistributedTableName("state")}
!{val distributedTableName = namedAggregate.toDistributedTableName("state_last")}
!{val localTableName = "${distributedTableName}_local"}
!{val consumerTableName = "${distributedTableName}_consumer"}

CREATE TABLE IF NOT EXISTS bi_db."${localTableName}" ON CLUSTER '{cluster}'
(
    id               String,
    context_name     String,
    aggregate_name   String,
    header           String,
    aggregate_id     String,
    tenant_id        String,
    command_id       String,
    request_id       String,
    version          UInt32,
    state            String,
    body             String,
    first_operator   String,
    first_event_time DateTime('Asia/Shanghai'),
    create_time      DateTime('Asia/Shanghai'),
    deleted          Bool
) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}',
                                        '{replica}', version)
      PARTITION BY sipHash64(aggregate_id) % 8
      ORDER BY (aggregate_id)
;

CREATE TABLE IF NOT EXISTS bi_db."${distributedTableName}" ON CLUSTER '{cluster}'
    AS bi_db."${localTableName}"
        ENGINE = Distributed('{cluster}', bi_db, "${localTableName}", sipHash64(aggregate_id));

CREATE MATERIALIZED VIEW IF NOT EXISTS bi_db_consumer."${consumerTableName}"
            ON CLUSTER '{cluster}'
            TO bi_db."${distributedTableName}"
AS
SELECT *
FROM bi_db."${stateDistributedTableName}"
;