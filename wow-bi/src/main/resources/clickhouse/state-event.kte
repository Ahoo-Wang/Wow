@import me.ahoo.wow.api.modeling.NamedAggregate
@import me.ahoo.wow.bi.expansion.TableNaming.toTopicName
@import me.ahoo.wow.bi.expansion.TableNaming.toDistributedTableName

@param namedAggregate: NamedAggregate
@param topicPrefix: String = "wow."
@param kafkaBootstrapServers: String = "localhost:9093"
@param suffix: String = "state"

!{val topic = namedAggregate.toTopicName(topicPrefix, suffix)}
!{val distributedTableName = namedAggregate.toDistributedTableName(suffix)}
!{val localTableName = "${distributedTableName}_local"}
!{val queueTableName = "${distributedTableName}_queue"}
!{val consumerTableName = "${distributedTableName}_consumer"}


CREATE TABLE IF NOT EXISTS bi_db."${localTableName}" ON CLUSTER '{cluster}'
(
    id               String,
    context_name     String,
    aggregate_name   String,
    header           String,
    aggregate_id     String,
    tenant_id        String,
    command_id       String,
    request_id       String,
    version          UInt32,
    state            String,
    body             String,
    first_operator   String,
    first_event_time DateTime('Asia/Shanghai'),
    create_time      DateTime('Asia/Shanghai'),
    deleted          Bool
) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}',
                                        '{replica}', version)
      PARTITION BY toYYYYMM(create_time)
      ORDER BY (aggregate_id, version)
;

CREATE TABLE IF NOT EXISTS bi_db."${distributedTableName}" ON CLUSTER '{cluster}'
    AS bi_db."${localTableName}"
        ENGINE = Distributed('{cluster}', bi_db, "${localTableName}", sipHash64(aggregate_id));

CREATE TABLE IF NOT EXISTS bi_db_consumer."${queueTableName}" ON CLUSTER '{cluster}'
(
    data String
) ENGINE = Kafka('${kafkaBootstrapServers}', '${topic}', 'clickhouse_${consumerTableName}', 'JSONAsString');

CREATE MATERIALIZED VIEW IF NOT EXISTS bi_db_consumer."${consumerTableName}"
            ON CLUSTER '{cluster}'
            TO bi_db."${distributedTableName}"
AS
SELECT JSONExtractString(data, 'id')            AS id,
       JSONExtractString(data, 'contextName')   AS context_name,
       JSONExtractString(data, 'aggregateName') AS aggregate_name,
       JSONExtractString(data, 'header')        AS header,
       JSONExtractString(data, 'aggregateId')   AS aggregate_id,
       JSONExtractString(data, 'tenantId')      AS tenant_id,
       JSONExtractString(data, 'commandId')     AS command_id,
       JSONExtractString(data, 'requestId')     AS request_id,
       JSONExtractUInt(data, 'version')         AS version,
       JSONExtractString(data, 'state')         AS state,
       JSONExtractString(data, 'body')          AS body,
       JSONExtractString(data, 'firstOperator') AS first_operator,
       toDateTime64(JSONExtractUInt(data, 'firstEventTime') / 1000.0
           , 3, 'Asia/Shanghai')                AS first_event_time,
       toDateTime64(JSONExtractUInt(data, 'createTime') / 1000.0
           , 3, 'Asia/Shanghai')                AS create_time,
       JSONExtractBool(data, 'deleted')         AS deleted
FROM bi_db_consumer."${queueTableName}"
;